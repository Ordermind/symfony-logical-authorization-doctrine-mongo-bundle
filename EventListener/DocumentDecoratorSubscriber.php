<?php
declare(strict_types=1);

namespace Ordermind\LogicalAuthorizationDoctrineMongoBundle\EventListener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;

use Doctrine\Common\Inflector\Inflector;

use Ordermind\LogicalAuthorizationDoctrineMongoBundle\Event\DocumentDecoratorEvents\BeforeMethodCallEventInterface;
use Ordermind\LogicalAuthorizationDoctrineMongoBundle\Event\DocumentDecoratorEvents\BeforeSaveEventInterface;
use Ordermind\LogicalAuthorizationDoctrineMongoBundle\Event\DocumentDecoratorEvents\BeforeDeleteEventInterface;

use Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationModelInterface;

class DocumentDecoratorSubscriber implements EventSubscriberInterface {
  /**
   * @var Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationModelInterface
   */
  protected $laModel;

  /**
   * @internal
   *
   * @param Ordermind\LogicalAuthorizationBundle\Services\LogicalAuthorizationModelInterface $laModel LogicalAuthorizationModel service for checking model permissions
   */
  public function __construct(LogicalAuthorizationModelInterface $laModel) {
    $this->laModel = $laModel;
  }

  /**
    * {@inheritdoc}
    */
  public static function getSubscribedEvents(): array {
    return [
      'logauth_doctrine_mongo.event.document_decorator.before_method_call' => [
        ['onBeforeMethodCall'],
      ],
      'logauth_doctrine_mongo.event.document_decorator.before_save' => [
        ['onBeforeSave'],
      ],
      'logauth_doctrine_mongo.event.document_decorator.before_delete' => [
        ['onBeforeDelete'],
      ],
    ];
  }

  /**
   * Event subscriber callback for aborting method call on document if access is not granted
   *
   * @param Ordermind\LogicalAuthorizationDoctrineMongoBundle\Event\DocumentDecoratorEvents\BeforeMethodCallEventInterface $event The subscribed event
   */
  public function onBeforeMethodCall(BeforeMethodCallEventInterface $event) {
    static $stored_methods;
    if(!isset($stored_methods)) $stored_methods = [];

    $document = $event->getDocument();
    $method = $event->getMethod();
    $arguments = $event->getArguments();
    $field = null;
    $action = null;

    // Support for __get() and __set()
    if($method === '__get') {
      $field = $arguments[0];
      $action = 'get';
    }
    elseif($method === '__set') {
      $field = $arguments[0];
      $action = 'set';
    }

    // Support for field-specific getters and setters generated by Doctrine
    if(!$action) {
      $class = get_class($document);

      if(!isset($stored_methods[$class])) {
        $metadata = $event->getMetadata();
        $field_names = $metadata->getFieldNames();
        $stored_methods[$class] = [];
        foreach($field_names as $field_name) {
          $stored_methods[$class][$field_name] = $this->getFieldMethods($document, $field_name);
        }
      }

      foreach($stored_methods[$class] as $field_name => $methods) {
        if(in_array($method, $methods['getters'])) {
          $field = $field_name;
          $action = 'get';
          break;
        }
        elseif(in_array($method, $methods['setters'])) {
          $field = $field_name;
          $action = 'set';
          break;
        }
      }
    }

    // If the method is a known getter or setter, do a suitable permission check on the document and then on the field.
    if($action === 'get') {
      if(!$this->laModel->checkModelAccess($document, 'read')) {
        $event->setAbort(true);
      }
      if(!$event->getAbort() && !$this->laModel->checkFieldAccess($document, $field, 'get')) {
        $event->setAbort(true);
      }
    }
    elseif($action === 'set') {
      if($event->isNew()) {
        if(!$this->laModel->checkModelAccess($document, 'create')) {
          $event->setAbort(true);
        }
      }
      else {
        if(!$this->laModel->checkModelAccess($document, 'update')) {
          $event->setAbort(true);
        }
      }
      if(!$event->getAbort() && !$this->laModel->checkFieldAccess($document, $field, 'set')) {
        $event->setAbort(true);
      }
    }
  }

  /**
   * Event subscriber callback for aborting saving of document if access is not granted
   *
   * @param Ordermind\LogicalAuthorizationDoctrineMongoBundle\Event\DocumentDecoratorEvents\BeforeSaveEventInterface $event The subscribed event
   */
  public function onBeforeSave(BeforeSaveEventInterface $event) {
    $document = $event->getDocument();
    if($event->isNew()) {
      if(!$this->laModel->checkModelAccess($document, 'create')) {
        $event->setAbort(true);
      }
    }
    else {
      if(!$this->laModel->checkModelAccess($document, 'update')) {
        $event->setAbort(true);
      }
    }
  }

  /**
   * Event subscriber callback for aborting deletion of document if access is not granted
   *
   * @param Ordermind\LogicalAuthorizationDoctrineMongoBundle\Event\DocumentDecoratorEvents\BeforeDeleteEventInterface $event The subscribed event
   */
  public function onBeforeDelete(BeforeDeleteEventInterface $event) {
    $document = $event->getDocument();
    if(!$event->isNew() && !$this->laModel->checkModelAccess($document, 'delete')) {
      $event->setAbort(true);
    }
  }

  protected function getFieldMethods($document, string $field_name): array {
    $camelizedFieldName = Inflector::classify($field_name);

    $methods = [
      'getters' => [
        "get$camelizedFieldName",
        "is$camelizedFieldName",
      ],
      'setters' => [
        "set$camelizedFieldName",
      ],
    ];

    foreach ($methods as $action => $action_methods) {
      foreach($action_methods as $i => $method) {
        if (!method_exists($document, $method)) {
          unset($methods[$action][$i]);
        }
      }
    }

    return $methods;
  }
}
